--- /public/index ---

<?php
require_once __DIR__ . '/../config/bootstrap.php';

$page = $_GET['page'] ?? 'home';
$page = rtrim($page, '/');

// kalau dimulai dari api --> load src/api
if (str_starts_with($page, 'api')) {
  // Load dari folder src/api
  $apiPath = ROOT_PATH . '/src/' . $page . '.php';
  if (file_exists($apiPath)) {
    include $apiPath;
  } else {
    // Cek apakah ada folder dengan index.php
    $apiPath = ROOT_PATH . '/src/' . $page . '/index.php';
    if (file_exists($apiPath)) {
      include $apiPath;
    } else {
      // Response JSON jika API tidak ditemukan
      respond_json(['success' => false, 'message' => 'API endpoint not found'], 404);
    }
    exit;
  }
}
// kalau tidak dimulai dari api -> load src/pages
else {
  // Load dari folder pages
  $pageFile = ROOT_PATH . '/src/pages/' . $page . '.php';
  if (file_exists($pageFile)) {
    include $pageFile;
  } else {
    // Cek apakah ada folder dengan index.php
    $pageFile = ROOT_PATH . '/src/pages/' . $page . '/index.php';
    if (file_exists($pageFile)) {
      include $pageFile;
    } else {
      // tampilkan halaman 404 kalau tidak ditemukan
      include ROOT_PATH . '/src/pages/404.php';
    }
  }
}
$conn->close();



--- includes/admin/layput/haader ----
<?php
page_require_admin();
?>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="<?= ASSETS_URL . 'favicon.ico' ?>" type="image/x-icon">
  <title><?= $pageTitle ?> | GG MART | Toko Pangan</title>
  <!-- <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/alpinejs" defer></script> -->
  <link rel="stylesheet" href="<?= ASSETS_URL ?>/css/app.css">
  <script src="<?= ASSETS_URL . '/js/cdn.min.js' ?>" defer></script>
  <link rel="manifest" href="<?= BASE_URL . '/manifest.json' ?>">
</head>

<body class="overflow-y-auto h-[100dvh] flex flex-col bg-gray-100"
  x-data="{ 
    sidebarOpen: false,
    sidebarCollapse: JSON.parse(localStorage.getItem('sidebarCollapse')) || false,
    fullscreen: false,
    toggleSidebar() {
      this.sidebarCollapse = !this.sidebarCollapse;
      localStorage.setItem('sidebarCollapse', JSON.stringify(this.sidebarCollapse));
    } 
  }"
  x-on:keydown.window="
    if($event.key === 'Escape') { fullscreen = false;}
    if ($event.ctrlKey && $event.shiftKey && $event.key === 'F') {
      $event.preventDefault();
      fullscreen = !fullscreen;
    }
  ">

  <?php
  include INCLUDES_PATH . '/admin/layout/navbar.php';

  include INCLUDES_PATH . '/admin/layout/sidebar.php';
  ?>
  <main class="flex-1 overflow-y-auto mb-3"
    :class="fullscreen ? 'm-0 p-0' : (sidebarCollapse ? 'lg:ml-16' : 'lg:ml-64')">

--- includes/admin/layout/navbar ---
<!-- NAVBAR -->
<header x-data="headerAdmin()" class="flex items-center justify-between bg-white border-b px-4 py-2 shadow-md relative z-10"
  :class="sidebarCollapse ? 'lg:ml-16' : 'lg:ml-64'" x-show="!fullscreen" x-transition.opacity>
  <div class="flex items-center space-x-2">
    <!-- Tombol menu (mobile) -->
    <button @click="sidebarOpen = true" class="lg:hidden p-2 rounded hover:bg-gray-100">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5" />
      </svg>
    </button>
    <span><img :src="assetsUrl + '/logo.png'" alt="MyApp Logo" class="h-10"></span>
  </div>
  <div class="flex items-center space-x-4">
    <button @click="logout">Logout</button>
  </div>
</header>

<script>
  const headerAdmin = () => ({
    logout() {
      fetch(`${baseUrl}/api/auth?logout=true`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showFlash(data.message)
            setInterval(() => {
              window.location.href = baseUrl
            }, 1000);
          } else {
            showFlash(data.message, 'error')
          }
        })
        .catch(error => console.error(error));
    }
  })
</script>

--- includes/admin/layout/sidebar ---
<div x-data="sidebarAdmin()" x-show="!fullscreen" x-transition.opacity>
  <aside
    :class="sidebarCollapse ? 'w-16' : 'w-64'"
    class="w-16 hidden lg:flex flex-col bg-white border-r shadow-md transition-all duration-300 fixed inset-y-0 left-0 z-10">

    <!-- Header Sidebar -->
    <div class="flex items-center justify-between px-4 py-2 border-b">
      <span x-show="!sidebarCollapse" class="font-bold text-xl text-gg-primary">
        Menu
      </span>
      <button x-show="!sidebarCollapse" @click="toggleSidebar" class="p-2 rounded hover:bg-gray-100" title="Tutup Sidebar">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="m18.75 4.5-7.5 7.5 7.5 7.5m-6-15L5.25 12l7.5 7.5" />
        </svg>
      </button>
      <button @click="toggleSidebar" class="p-2 rounded hover:bg-gray-100" x-show="sidebarCollapse" title="Buka Sidebar">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5" />
        </svg>
      </button>
    </div>

    <!-- Menu -->
    <nav class="flex-1 p-2 space-y-2">
      <template x-for="menu in listMenuAdmin">
        <a :href="baseUrl + menu.url" class="w-full justify-start hover:bg-gg-primary/70 hover:text-white" :class="location.pathname == menu.url ? 'bg-gg-primary/90 text-white' : 'bg-transparent text-neutral-900'" :title="menu.title">
          <span x-html="menu.ikon"></span>
          <span x-show="!sidebarCollapse" class="ml-3" x-text="menu.title"></span>
        </a>
      </template>
    </nav>
  </aside>


  <!-- MOBILE SIDEBAR OVERLAY -->
  <div
    x-show="sidebarOpen"
    class="fixed inset-0 flex z-30 lg:hidden"
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0 -translate-x-full"
    x-transition:enter-end="opacity-100 translate-x-0"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-100 translate-x-0"
    x-transition:leave-end="opacity-0 -translate-x-full">

    <div @click="sidebarOpen = false" class="fixed inset-0 bg-black bg-opacity-50"></div>

    <aside class="relative w-64 bg-white shadow-md flex flex-col z-50">
      <div class="flex items-center justify-between p-4 border-b">
        <span><img :src="assetsUrl  + '/logo.png'" alt="" class="h-10 inline-block"></span>
        <span class="text-gg-primary font-bold">Menu</span>
        <button @click="sidebarOpen = false" class="p-2 rounded hover:bg-gray-100">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m18.75 4.5-7.5 7.5 7.5 7.5m-6-15L5.25 12l7.5 7.5" />
          </svg>
        </button>
      </div>
      <nav class="flex-1 p-2 space-y-2">
        <template x-for="menu in listMenuAdmin">
          <a :href="baseUrl + menu.url" class="w-full gap-2 hover:text-white justify-start hover:bg-gg-primary/70" :class="window.location.pathname==menu.url ? 'bg-gg-primary/90 text-white' : 'bg-transparent text-neutral-900'">
            <span x-html="menu.ikon"></span>
            <span x-text="menu.title"></span>
          </a>
        </template>
      </nav>
    </aside>
  </div>
</div>
<script src=" <?= ASSETS_URL . 'js/sidebarAdmin.js' ?>"></script>


--- includes/admin/layout/footer ---
</main>
<?php
include INCLUDES_PATH . "/flash.php";
include INCLUDES_PATH . 'app.js.php';
?>
<script src="<?= ASSETS_URL ?>/js/app.js""></script>
</body>

</html>



--- includes/app.js.php ---
<script>
  const baseUrl = <?= json_encode(BASE_URL) ?>;
  const assetsUrl = <?= json_encode(ASSETS_URL) ?>;
  const uploadsUrl = <?= json_encode(UPLOADS_URL) ?>;

  const currentUser = <?= json_encode($_SESSION['user'] ?? null) ?>;
  const isAdmin = <?= json_encode(is_admin()) ?>;

  function formatRupiah(angka) {
    angka = new Intl.NumberFormat('id-ID').format(angka);
    return 'Rp' + angka;
  }

  function formatDate(dateStr) {
    const options = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    };
    const date = new Date(dateStr);
    return date.toLocaleDateString('id-ID', options);
  }

  function formatDateTime(dateStr) {
    const options = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    };
    const date = new Date(dateStr);
    return date.toLocaleDateString('id-ID', options);
  }

  function storageHelper(key, action, value = null) {
    const data = JSON.parse(localStorage.getItem(key) || '[]')

    switch (action) {
      case 'load':
        return data

      case 'save':
        if (!value) return
        // tambahkan item baru ke depan, hapus duplikat, batasi 100 item
        const updated = [value, ...data.filter(i => i !== value)].slice(0, 100)
        localStorage.setItem(key, JSON.stringify(updated))
        return updated

      case 'remove':
        if (typeof value !== 'number') return
        data.splice(value, 1)
        localStorage.setItem(key, JSON.stringify(data))
        return data

      case 'clear':
        localStorage.removeItem(key)
        return []

      default:
        console.warn('storageHelper: action tidak dikenal ->', action)
        return data
    }
  }
</script>


--- ggmart.sql ---
-- =====================================================
-- DATABASE: gg_mart
-- =====================================================
CREATE DATABASE IF NOT EXISTS gg_mart;
USE gg_mart;

-- =====================================================
-- TABLE: user
-- =====================================================
CREATE TABLE IF NOT EXISTS user (
    id_user INT AUTO_INCREMENT PRIMARY KEY,
    nama VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'user') DEFAULT 'user',
    tanggal_dibuat DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- TABLE: kategori
-- =====================================================
CREATE TABLE IF NOT EXISTS kategori (
    id_kategori INT AUTO_INCREMENT PRIMARY KEY,
    nama_kategori VARCHAR(100) NOT NULL,
    deskripsi TEXT
);

-- =====================================================
-- TABLE: produk
-- =====================================================
CREATE TABLE IF NOT EXISTS produk (
    kode_produk CHAR(12) PRIMARY KEY,
    id_kategori INT,
    nama_produk VARCHAR(150) NOT NULL,
    deskripsi TEXT,
    harga INT NOT NULL,
    stok INT DEFAULT 0,
    terjual INT DEFAULT 0,
    gambar VARCHAR(255),
    tanggal_dibuat DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_produk_kategori
        FOREIGN KEY (id_kategori)
        REFERENCES kategori(id_kategori)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

-- =====================================================
-- TABLE: transaksi
-- =====================================================
CREATE TABLE IF NOT EXISTS transaksi (
    id_transaksi INT AUTO_INCREMENT PRIMARY KEY,
    id_user INT,
    tanggal_transaksi DATETIME DEFAULT CURRENT_TIMESTAMP,
    total_harga INT NOT NULL,
    status ENUM('pending','diproses','dikirim','selesai','batal') DEFAULT 'pending',
    kode_transaksi CHAR(15) UNIQUE,
    metode_bayar ENUM('QRIS','TUNAI') DEFAULT 'TUNAI',
    CONSTRAINT fk_transaksi_user
        FOREIGN KEY (id_user)
        REFERENCES user(id_user)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);

-- =====================================================
-- TABLE: detail_transaksi
-- =====================================================
CREATE TABLE IF NOT EXISTS detail_transaksi (
    id_detail INT AUTO_INCREMENT PRIMARY KEY,
    id_transaksi INT NOT NULL,
    kode_produk CHAR(12),
    jumlah INT DEFAULT 1,
    harga_satuan INT NOT NULL,
    subtotal INT NOT NULL,

    CONSTRAINT fk_detail_transaksi
        FOREIGN KEY (id_transaksi)
        REFERENCES transaksi(id_transaksi)
        ON DELETE CASCADE
        ON UPDATE CASCADE,

    CONSTRAINT fk_detail_produk
        FOREIGN KEY (kode_produk)
        REFERENCES produk(kode_produk)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS stok (
  id_stok INT AUTO_INCREMENT PRIMARY KEY,
  kode_produk CHAR(12) NOT NULL,
  tipe ENUM('masuk','keluar') NOT NULL,
  jumlah INT NOT NULL,
  tanggal DATETIME DEFAULT CURRENT_TIMESTAMP,
  keterangan TEXT,
  FOREIGN KEY (kode_produk) REFERENCES produk(kode_produk)
);



--- pages/admin/kategori ---
<?php
$pageTitle = "Kelola Kategori";
include INCLUDES_PATH . "admin/layout/header.php";
?>

<div x-data="kelolaKategoriPage()" x-init="fetchKategori()" class=" bg-gray-50 min-h-[100dvh] space-y-3">
  <!-- HEADER -->
  <div class="flex flex-col md:flex-row md:items-center lg:p-5 p-3 md:justify-between gap-4">
    <div>
      <h1 class="text-2xl font-bold text-neutral-800">Kelola Kategori</h1>
      <p class="text-sm text-gray-500">Pantau dan kelola seluruh kategori GG-Mart dari sini.</p>
    </div>

    <!-- SEARCH + ADD -->
    <div class="flex items-center gap-3">
      <form @submit.prevent="doSearch" class="flex items-center shadow-sm">
        <input type="text" x-model="search" placeholder="Cari kategori..."
          class="rounded-r-none w-48 md:w-64">
        <button type="submit"
          class="bg-gg-primary text-white rounded-r-md font-medium">Cari</button>
      </form>

      <a :href="baseUrl + '/admin/kategori/form?act=tambah'"
        class="bg-gg-accent hover:opacity-90 text-white">
        <span class="text-lg">+</span>
        <span class="hidden md:inline">Tambah</span>
      </a>
    </div>
  </div>

  <!-- LOADING -->
  <?php include INCLUDES_PATH . '/loading.php' ?>

  <!-- TABEL KATEGORI -->
  <?php include INCLUDES_PATH . '/admin/table_kategori.php' ?>


  <!-- KOSONG -->
  <template x-if="!loading && kategori.length === 0">
    <div class="bg-white rounded-lg shadow p-12 text-center border border-gray-200">
      <h3 class="text-lg font-semibold text-neutral-900S">Tidak ada kategori</h3>
      <p class="text-sm text-neutral-500 mb-4">Tambahkan kategori baru untuk mulai mengelola produk.</p>
      <a :href=" baseUrl + '/admin/kategori/form?act=tambah'"
        class="inline-block bg-gg-primary hover:bg-gg-primary/80 text-white px-6 py-2 rounded-md font-medium shadow-sm">Tambah
        Kategori</a>
    </div>
  </template>

</div>


<script src="<?= ASSETS_URL . 'js/kelolaKategoriPage.js' ?>"></script>
<?php include INCLUDES_PATH . "admin/layout/footer.php"; ?>


--- js/kelolaKategoriPage.js ---
function kelolaKategoriPage() {
  return {
    kategori: [],
    search: "",
    loading: false,
    pagination: {
      page: 1,
      total: 0,
      total_pages: 1,
      limit: 10
    },

    async fetchKategori(page = 1) {
      this.loading = true;
      const urlApi = `${baseUrl}/api/kategori?halaman=${page}&limit=${this.pagination.limit}&search=${encodeURIComponent(this.search)}`;
      try {
        const res = await fetch(urlApi);
        const data = await res.json();
        if (data.success) {
          this.kategori = data.data;
          this.pagination = data.pagination;
        } else {
          console.error("API error:", data.message);
        }
      } catch (e) {
        console.error("FetchKategori error:", e);
      } finally {
        this.loading = false;
      }
    },

    doSearch() {
      this.pagination.page = 1;
      this.fetchKategori();
    },

    nextPage() {
      if (this.pagination.page < this.pagination.total_pages) {
        this.pagination.page++;
        this.fetchKategori(this.pagination.page);
      }
    },

    prevPage() {
      if (this.pagination.page > 1) {
        this.pagination.page--;
        this.fetchKategori(this.pagination.page);
      }
    },

    goPage(n) {
      this.pagination.page = n;
      this.fetchKategori(n);
    },

    async hapusKategori(id) {
      let ok = await confirm('Yakin ingin menghapus kategori ini?');
      if (!ok) return;
      const res = await fetch(`${baseUrl}/api/kategori?id=${id}`, {
        method: 'DELETE',
      });
      const data = await res.json();
      if (data.success) {
        showFlash('Kategori berhasil dihapus');
        this.fetchKategori();
      } else {
        showFlash('Gagal menghapus kategori: ' + data.message);
      }
    }
  }
}



--- models/kategori ---
<?php

function findKategori($id)
{
  global $conn;
  $res = $conn->query("SELECT * FROM kategori WHERE id_kategori = $id");
  $result = $res->fetch_assoc();
  return $result;
}
function getAllKategori()
{
  global $conn;
  $sql = "SELECT * FROM kategori ORDER BY nama_kategori ASC";
  $res = $conn->query($sql);

  $kategori = [];
  while ($row = $res->fetch_assoc()) {
    $kategori[] = $row;
  }

  return $kategori;
}

function getKategoriList($page = 1, $limit = 10, $search = '')
{
  global $conn;
  $offset = ($page - 1) * $limit;

  $where = "";
  if ($search !== '') {
    $safe = "%" . $conn->real_escape_string($search) . "%";
    $where = "WHERE nama_kategori LIKE '$safe' OR deskripsi LIKE '$safe'";
  }

  // Hitung total
  $resCount = $conn->query("SELECT COUNT(*) AS total FROM kategori $where");
  $total = $resCount->fetch_assoc()['total'];

  // Ambil data
  $res = $conn->query("
    SELECT id_kategori, nama_kategori, deskripsi
    FROM kategori
    $where
    ORDER BY id_kategori DESC
    LIMIT $limit OFFSET $offset
  ");

  $kategori = [];
  while ($row = $res->fetch_assoc()) {
    $kategori[] = $row;
  }

  return [$kategori, $total];
}

function tambahKategori($data)
{
  global $conn;
  $sql = "INSERT INTO kategori (nama_kategori, deskripsi) VALUES (?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ss", $data['nama_kategori'], $data['deskripsi']);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}

function editKategori($id, $data)
{
  global $conn;
  $sql = "UPDATE kategori SET nama_kategori = ?, deskripsi = ? WHERE id_kategori = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ssi", $data['nama_kategori'], $data['deskripsi'], $id);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}

function hapusKategori($id)
{
  global $conn;
  $stmt = $conn->prepare("DELETE FROM kategori WHERE id_kategori = ?");
  $stmt->bind_param('i', $id);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}


--- api/kategori ---
<?php

models('Kategori');
require_once ROOT_PATH . '/config/api_init.php';

// Ambil ID kategori (untuk Read One, PUT, DELETE)
$id_kategori = isset($_GET['id']) ? intval($_GET['id']) : null;

// Logika Penanganan Berdasarkan Metode HTTP
$res = [];
$status = 200;
switch ($method) {
  case 'GET':
    // GET /api/kategori?mode=all
    if (isset($_GET['mode']) && $_GET['mode'] === 'all') {
      $kategori = getAllKategori();
      $res = ['success' => true, 'data' => $kategori];
      break;
    }
    // GET /api/kategori?id=1
    if ($id_kategori) {
      $kategori = findKategori($id_kategori);
      if ($kategori) {
        $res = ['success' => true, 'data' => $kategori];
      } else {
        $res = ['success' => false, 'message' => 'Kategori tidak ditemukan'];
        $status = 404;
      }
      break;
    }

    // GET /api/kategori
    $page   = isset($_GET['halaman']) ? max(1, intval($_GET['halaman'])) : 1;
    $limit  = isset($_GET['limit']) ? intval($_GET['limit']) : 10;
    $search = isset($_GET['search']) ? trim($_GET['search']) : '';
    try {
      [$kategori, $total] = getKategoriList($page, $limit, $search);
      $res = [
        'success' => true,
        'data' => $kategori,
        "pagination" => [
          "total" => intval($total),
          "page" => $page,
          "limit" => $limit,
          "total_pages" => ceil($total / $limit)
        ]
      ];
    } catch (Exception $e) {
      $res = ["success" => false, "message" => $e->getMessage()];
      $status = 500;
    }
    break;

  case 'POST':
    api_require_admin();
    // POST /api/kategori
    if (empty($input_data['nama_kategori'])) {
      $res = ['success' => false, 'message' => 'Nama kategori wajib diisi.'];
      $status = 422;
      break;
    }

    $is_tambah = tambahKategori($input_data);

    if ($is_tambah) {
      $res = ['success' => true, 'message' => 'Kategori berhasil ditambahkan'];
      $status = 201;
    } else {
      $res = ['success' => false, 'message' => 'Gagal menambahkan kategori'];
      $status = 500;
    }
    break;

  case 'PUT':
    api_require_admin();
    // PUT /api/kategori?id=1
    if (!$id_kategori) {
      $res = ['success' => false, 'message' => 'ID kategori wajib diisi untuk update.'];
      $status = 400;
      break;
    }

    if (empty($input_data['nama_kategori'])) {
      $res = ['success' => false, 'message' => 'Nama kategori wajib diisi.'];
      $status = 422;
      break;
    }

    $is_edit = editKategori($id_kategori, $input_data);

    if ($is_edit) {
      $res = ['success' => true, 'message' => 'Kategori berhasil diupdate'];
    } else {
      $res = ['success' => false, 'message' => 'Kategori gagal diupdate atau tidak ditemukan'];
      $status = 404;
    }
    break;

  case 'DELETE':
    api_require_admin();
    // DELETE /api/kategori?id=1
    if (!$id_kategori) {
      $res = ['success' => false, 'message' => 'ID kategori wajib diisi untuk delete.'];
      $status = 400;
      break;
    }

    try {
      $is_hapus = hapusKategori($id_kategori);
      if ($is_hapus) {
        $res = ['success' => true, 'message' => 'Kategori berhasil dihapus'];
      } else {
        throw new Exception();
      }
    } catch (Exception $e) {
      $res = ['success' => false, 'message' => 'Terjadi kesalahan saat menghapus kategori'];
      $status = 404;
    }
    break;

  default:
    $res = ['success' => false, 'message' => 'Metode ' . $method . ' tidak didukung.'];
    $status = 405;
}
// respon
respond_json($res, $status);



--- pages/admin/produk ---
<?php
$pageTitle = "Kelola Produk";
include INCLUDES_PATH . "/admin/layout/header.php";
?>

<div x-data="kelolaProdukPage()" x-init="fetchProduk()" class="bg-gray-50 space-y-3">
  <!-- HEADER -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 p-3 lg:p-5">
    <div>
      <h1 class="text-2xl font-bold text-neutral-800 tracking-tight">Kelola Produk</h1>
      <p class="text-sm text-gray-500">Pantau dan kelola seluruh produk GG-Mart dari sini.</p>
    </div>

    <div class="flex items-center gap-3">
      <!-- SEARCH -->
      <form @submit.prevent="doSearch" class="flex items-center shadow-sm">
        <input type="text" x-model="search" placeholder="Cari produk..."
          class="rounded-r-none w-48 md:w-64">
        <button type="submit"
          class="bg-gg-primary text-white rounded-r-md font-medium">Cari</button>
      </form>

      <!-- ADD -->
      <a :href="baseUrl + '/admin/produk/form?act=tambah'"
        class="bg-gg-accent hover:opacity-90 text-white">
        <span class="text-lg leading-none">+</span>
        <span class="hidden md:inline">Tambah</span>
      </a>
    </div>
  </div>

  <!-- LOADING -->
  <?php include INCLUDES_PATH . '/loading.php' ?>

  <!-- TABEL PRODUK -->
  <?php include INCLUDES_PATH . '/admin/table_produk.php' ?>

  <!-- KOSONG -->
  <template x-if="!loading && produk.length === 0">
    <div class="bg-white rounded-lg shadow p-12 text-center border border-gray-200">
      <img :src="baseUrl + '/assets/img/no-image.webp'" alt="Tidak ada produk"
        class="mx-auto w-28 h-28 opacity-60 mb-4">
      <h3 class="text-lg font-semibold text-gray-800">Tidak ada produk</h3>
      <p class="text-sm text-neutral-500 mb-4">Tambahkan Produk baru untuk mulai berjualan.</p>
      <a :href="baseUrl + '/admin/produk/form?act=tambah'"
        class="inline-block bg-gg-primary hover:bg-gg-primary-hover text-white px-6 py-2 rounded-md font-medium shadow-sm">Tambah
        Produk</a>
    </div>
  </template>

</div>

<script src="<?= ASSETS_URL . 'js/kelolaProdukPage.js' ?>"></script>

<?php include INCLUDES_PATH . "admin/layout/footer.php"; ?>


--- js/Admin/kelolaProdukPage.js ---
function kelolaProdukPage() {
  return {
    produk: [],
    pagination: {
      page: 1,
      total: 0,
      total_pages: 1,
      limit: 10
    },
    search: "",
    loading: false,

    async fetchProduk(page = 1) {
      this.loading = true;
      const urlApi = `${baseUrl}/api/produk?halaman=${page}&limit=${this.pagination.limit}&search=${encodeURIComponent(this.search)}`;

      try {
        const res = await fetch(urlApi);
        const data = await res.json();
        if (data.success) {
          this.produk = data.data;
          this.pagination = data.pagination;
        } else {
          console.error("API error:", data.message);
        }
      } catch (e) {
        console.error("FetchProduk error:", e);
      } finally {
        this.loading = false;
      }
    },

    doSearch() {
      this.pagination.page = 1;
      this.fetchProduk();
    },

    nextPage() {
      if (this.pagination.page < this.pagination.total_pages) {
        this.pagination.page++;
        this.fetchProduk(this.pagination.page);
      }
    },

    prevPage() {
      if (this.pagination.page > 1) {
        this.pagination.page--;
        this.fetchProduk(this.pagination.page);
      }
    },

    goPage(n) {
      this.pagination.page = n;
      this.fetchProduk(n);
    },

    async hapusProduk(kode) {
      let ok = await confirm("Yakin ingin menghapus produk ini?");
      if (await !ok) return;
      let res = await fetch(`${baseUrl}/api/produk?k=${kode}`, {
        method: "DELETE"
      })
      res = await res.json();
      if (res.success) {
        this.produk = this.produk.filter(p => p.kode_produk !== kode);
        showFlash("✅ Produk berhasil dihapus!");
      } else {
        showFlash("❌ Gagal menghapus produk: " + d.message);
      }
    }
  };
}


--- models/produk ---
<?php




function findProduk($kode)
{
  global $conn;
  $sql = "SELECT * FROM produk WHERE kode_produk = '$kode'";
  $result = $conn->query($sql);
  $result = $result->fetch_assoc();
  return $result;
}

function getAllProduk()
{
  global $conn;
  $sql = "
    SELECT p.kode_produk, p.nama_produk, k.nama_kategori, p.harga, p.stok, p.terjual,
    p.gambar, p.deskripsi FROM produk p
    LEFT JOIN kategori k ON p.id_kategori = k.id_kategori
    ORDER BY p.nama_produk ASC
  ";
  $res = $conn->query($sql);

  $produk = [];
  while ($row = $res->fetch_assoc()) {
    $produk[] = $row;
  }

  return $produk;
}

function getProdukList($page = 1, $limit = 10, $search = '', $order_by = 'tanggal_dibuat', $order_dir = 'DESC')
{
  global $conn;
  $offset = ($page - 1) * $limit;

  $where = "";
  if ($search !== '') {
    $safe = "%" . $conn->real_escape_string($search) . "%";
    $where = "WHERE p.nama_produk LIKE '$safe' OR k.nama_kategori LIKE '$safe'";
  }
  // hitung total
  $resCount = $conn->query("SELECT COUNT(*) AS total FROM produk p LEFT JOIN kategori k ON p.id_kategori = k.id_kategori $where");
  $total = $resCount->fetch_assoc()['total'];

  // ambil data
  $res = $conn->query("
    SELECT p.kode_produk, p.nama_produk, p.deskripsi, p.harga, p.stok, p.terjual, 
           p.gambar, k.nama_kategori
    FROM produk p 
    LEFT JOIN kategori k ON p.id_kategori = k.id_kategori
    $where
    ORDER BY $order_by $order_dir
    LIMIT $limit OFFSET $offset
  ");

  $produk = [];
  while ($row = $res->fetch_assoc()) {
    $produk[] = $row;
  }
  return [$produk, $total];
}

function tambahProduk($data)
{
  global $conn;
  $sql = "INSERT INTO produk (kode_produk, nama_produk, harga, id_kategori, deskripsi, gambar) VALUES (?, ?, ?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param(
    "ssisss",
    $data['kode_produk'],
    $data['nama_produk'],
    $data['harga'],
    $data['id_kategori'],
    $data['deskripsi'],
    $data['gambar']
  );
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}

function editProduk($kode, $data)
{
  global $conn;

  $sql = "UPDATE produk SET nama_produk=?, harga=?, id_kategori=?, deskripsi=?";
  $params = [$data['nama_produk'], $data['harga'], $data['id_kategori'], $data['deskripsi']];
  $types = "siss";

  if (!empty($data['terjual'])) {
    $sql .= ", terjual=?";
    $types .= "i";
    $params[] = $data['terjual'];
  }

  if (!empty($data['gambar'])) {
    $sql .= ", gambar=?";
    $types .= "s";
    $params[] = $data['gambar'];
  }

  $sql .= " WHERE kode_produk=?";
  $types .= "s";
  $params[] = $kode;

  $stmt = $conn->prepare($sql);
  $stmt->bind_param($types, ...$params);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}

function hapusProduk($kode)
{
  global $conn;

  $sql = "DELETE FROM produk WHERE kode_produk = '$kode'";
  $result = $conn->query($sql);
  return $result;
}

// tambahan
function getProdukHampirHabis($batas = 10)
{
  global $conn;
  $b = intval($batas);
  $sql = "
    SELECT kode_produk, nama_produk, stok
    FROM produk
    WHERE stok < $b
    ORDER BY stok ASC, nama_produk ASC
    LIMIT 50
  ";
  $res = $conn->query($sql);
  $out = [];
  if ($res) {
    while ($row = $res->fetch_assoc()) $out[] = $row;
  }
  return $out;
}

function updateStokProduk($kode_produk, $stok_baru)
{
  global $conn;
  $sql = "UPDATE produk SET stok = ? WHERE kode_produk = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("is", $stok_baru, $kode_produk);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}
function updateTerjualProduk($kode_produk, $terjual)
{
  global $conn;
  $sql = "UPDATE produk SET terjual = ? WHERE kode_produk = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("is", $terjual, $kode_produk);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}


--- api/produk ---
<?php

models('Produk');

require_once ROOT_PATH . '/config/api_init.php';


// Ambil kode produk (jika ada)
$kode_produk = isset($_GET['k']) ? $_GET['k'] : null;

$res = [];
$status = 200;
switch ($method) {
  case 'GET':
    // GET /api/produk?mode=all
    if (isset($_GET['mode']) && $_GET['mode'] === 'all') {
      $produk = getAllProduk();
      $res = ['success' => true, 'data' => $produk];
      break;
    }

    // GET /api/produk?k=PRD_3247371
    if ($kode_produk) {
      $produk = findProduk($kode_produk);
      if ($produk) {
        $res = ['success' => true, 'data' => $produk];
      } else {
        $res = ['success' => false, 'message' => 'Produk tidak ditemukan'];
        $status = 404;
      }
      break;
    }

    // GET /api/produk
    $page   = isset($_GET['halaman']) ? max(1, intval($_GET['halaman'])) : 1;
    $limit  = isset($_GET['limit']) ? intval($_GET['limit']) : 10;
    $search = trim($_GET['search'] ?? '');

    try {
      [$daftar_produk, $total] = getProdukList($page, $limit, $search);
      $res = [
        'success' => true,
        'data' => $daftar_produk,
        'pagination' => [
          'total' => intval($total),
          'page' => $page,
          'limit' => $limit,
          'total_pages' => ceil($total / $limit)
        ]
      ];
    } catch (Exception $e) {
      $res = ["success" => false, "message" => $e->getMessage()];
      $status = 500;
    }
    break;

  case 'POST':
    api_require_admin();
    // POST /api/produk
    if (empty($input_data['nama_produk']) || empty($input_data['harga'])) {
      $res = ['success' => false, 'message' => 'Nama dan Harga wajib diisi.'];
      $status =  422;
      break;
    }

    $timePart = substr(str_replace('.', '', microtime(true)), -8);
    $randomPart = random_int(100, 999);
    $new_kode_produk = 'PRD_' . $timePart . $randomPart;
    $input_data['kode_produk'] = $new_kode_produk;

    // upload file
    if (!empty($_FILES['gambar']) && $_FILES['gambar']['error'] === UPLOAD_ERR_OK) {
      $ext = pathinfo($_FILES['gambar']['name'], PATHINFO_EXTENSION);
      $filename = $new_kode_produk . '.' . $ext;
      $targetDir = ROOT_PATH . '/public/uploads/';
      if (!is_dir($targetDir)) mkdir($targetDir, 0755, true);
      if (move_uploaded_file($_FILES['gambar']['tmp_name'], $targetDir . $filename)) {
        $input_data['gambar'] = $filename;
      }
    }

    tambahProduk($input_data);
    $res = ['success' => true, 'message' => 'Produk berhasil ditambahkan', 'data' => $new_kode_produk];
    $status = 201;
    break;

  case 'PUT':
    api_require_admin();
    // PUT api/produk?k=PRD_0238848
    if (!$kode_produk) {
      $res = ['success' => false, 'message' => 'Kode produk wajib diisi untuk update.'];
      $status = 400;
      break;
    }

    if (empty($input_data['nama_produk']) || empty($input_data['harga'])) {
      $res = ['success' => false, 'message' => 'Nama dan Harga wajib diisi.'];
      $status = 422;
      break;
    }

    // handle upload baru
    if (!empty($_FILES['gambar']) && $_FILES['gambar']['error'] === UPLOAD_ERR_OK) {
      $ext = pathinfo($_FILES['gambar']['name'], PATHINFO_EXTENSION);
      $filename = $kode_produk . '.' . $ext;
      $targetDir = ROOT_PATH . '/public/uploads/';
      if (!is_dir($targetDir)) mkdir($targetDir, 0755, true);
      $targetFile = $targetDir . $filename;

      // hapus gambar lama
      $produk_lama = findProduk($kode_produk);
      if (!empty($produk_lama['gambar'])) {
        $oldPath = $targetDir . $produk_lama['gambar'];
        if (file_exists($oldPath)) unlink($oldPath);
      }

      // simpan file baru
      if (move_uploaded_file($_FILES['gambar']['tmp_name'], $targetFile)) {
        $input_data['gambar'] = $filename;
      }
    }


    $is_edit = editProduk($kode_produk, $input_data);
    if ($is_edit) {
      $res = ['success' => true, 'message' => 'Produk berhasil diupdate'];
    } else {
      $res = ['success' => false, 'message' => 'Produk gagal diupdate atau tidak ditemukan'];
      $status = 404;
    }
    break;

  case 'DELETE':
    api_require_admin();
    // DELETE /api/produk?k=PRD_28384783
    if (!$kode_produk) {
      $res = ['success' => false, 'message' => 'Kode produk wajib diisi untuk delete.'];
      $status = 400;
      break;
    }

    try {
      $produk_lama = findProduk($kode_produk);
      if ($produk_lama && !empty($produk_lama['gambar'])) {
        $path = ROOT_PATH . '/public/uploads/' . $produk_lama['gambar'];
        if (file_exists($path)) unlink($path);
      }


      $is_hapus = hapusProduk($kode_produk);
      $res = [
        'success' => $is_hapus,
        'message' => $is_hapus ? 'Produk berhasil dihapus' : 'Produk gagal dihapus atau tidak ditemukan'
      ];
      $status = $is_hapus ? 200 : 404;
    } catch (Exception $e) {
      $res = ['success' => false, 'message' => 'Teerjadi kesalahan saat menghapus produk'];
      $status = 500;
    }
    break;

  default:
    $res = ['success' => false, 'message' => 'Metode tidak didukung'];
    $status = 404;
}

respond_json($res, $status);



--- pages/admin/stok ---
<?php
$pageTitle = "Kelola Stok";
include INCLUDES_PATH . "/admin/layout/header.php";
?>

<div x-data="kelolaStokPage()" x-init="fetchStok()" class="bg-gray-50 space-y-3">
  <!-- HEADER -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 p-3 lg:p-5">
    <div>
      <h1 class="text-2xl font-bold text-neutral-800 tracking-tight">Kelola Stok Produk</h1>
      <p class="text-sm text-gray-500">Pantau dan kelola perubahan stok produk GG-Mart.</p>
    </div>

    <div class="flex items-center gap-3">
      <!-- TOMBOL TAMBAH -->
      <a :href="baseUrl + '/admin/stok/form'"
        class="bg-gg-accent hover:bg-gg-accent-hover text-white px-5 py-2 rounded-md font-medium shadow-sm">
        + Tambah Perubahan Stok
      </a>
    </div>
  </div>

  <!-- LOADING -->
  <?php include INCLUDES_PATH . '/loading.php' ?>

  <!-- TABEL -->
  <template x-if="!loading && stok.length > 0">
    <div class="md:p-3">
      <div
        class="bg-white rounded-md shadow-sm border border-gray-200 overflow-auto max-h-[80dvh] custom-scrollbar">
        <table class="table">
          <!-- HEAD -->
          <thead class="sticky top-0 bg-gray-100 z-10">
            <tr class="text-left text-sm font-semibold text-gray-700 uppercase tracking-wide">
              <th class="p-3">Tanggal</th>
              <th class="p-3">Produk</th>
              <th class="p-3">Tipe</th>
              <th class="p-3 text-right">Jumlah</th>
              <th class="p-3">Keterangan</th>
              <th class="p-3 text-center">Aksi</th>
            </tr>
          </thead>

          <!-- BODY -->
          <tbody>
            <template x-for="s in stok" :key="s.id_stok">
              <tr>
                <!-- TANGGAL -->
                <td class="p-3 whitespace-nowrap" x-text="formatDateTime(s.tanggal)"></td>

                <!-- PRODUK -->
                <td class="p-3 whitespace-nowrap" x-text="s.nama_produk"></td>

                <!-- TIPE -->
                <td class="p-3 font-semibold">
                  <span :class="s.tipe === 'masuk' ? 'text-green-600' : 'text-red-600'"
                    x-text="s.tipe.toUpperCase()"></span>
                </td>

                <!-- JUMLAH -->
                <td class="p-3 text-right font-medium" x-text="s.jumlah"></td>

                <!-- KETERANGAN -->
                <td class="p-3 truncate max-w-[250px]" x-text="s.keterangan || '-'"></td>

                <!-- AKSI -->
                <td class="p-3 text-center">
                  <button @click="hapusRiwayat(s.id_stok, s.jumlah, s.kode_produk)"
                    class="rounded-full text-red-600 hover:bg-red-50 hover:text-red-700 p-2 transition"
                    title="Hapus Riwayat">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none"
                      viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round"
                        d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </td>
              </tr>
            </template>
          </tbody>
        </table>
      </div>
    </div>
  </template>

  <!-- KOSONG -->
  <template x-if="!loading && stok.length === 0">
    <div class="bg-white rounded-lg shadow p-12 text-center border border-gray-200">
      <img :src="baseUrl + '/assets/img/no-image.webp'" alt="Tidak ada data"
        class="mx-auto w-28 h-28 opacity-60 mb-4">
      <h3 class="text-lg font-semibold text-gray-800">Belum ada perubahan stok</h3>
      <p class="text-sm text-neutral-500 mb-4">Tambahkan perubahan stok untuk memulai pencatatan.</p>
      <a :href="baseUrl + '/admin/stok/form'"
        class="inline-block bg-gg-accent hover:bg-gg-accent-hover text-white px-6 py-2 rounded-md font-medium shadow-sm">
        + <span class="hidden sm:inline">Tambah Perubahan Stok</span>
      </a>
    </div>
  </template>
</div>

<script src="<?= ASSETS_URL . '/js/kelolaStokPage.js' ?>"></script>
<?php include INCLUDES_PATH . "/admin/layout/footer.php"; ?>


--- /pages/js/kelolaStokPage.js ---
function kelolaStokPage() {
  return {
    stok: [],
    loading: false,

    async fetchStok() {
      this.loading = true;
      try {
        const res = await fetch(`${baseUrl}/api/stok`);
        const data = await res.json();
        if (data.success) {
          this.stok = data.data;
        }
      } catch (err) {
        console.error("Fetch stok error:", err);
      } finally {
        this.loading = false;
      }
    },

    async hapusRiwayat(id, jumlah, kode_produk) {
      if (!confirm("Yakin ingin menghapus riwayat ini?")) return;
      const res = await fetch(`${baseUrl}/api/stok?id=${id}&jumlah=${jumlah}&kode_produk=${kode_produk}`, { method: "DELETE" });
      const data = await res.json();
      if (data.success) {
        this.stok = this.stok.filter(s => s.id_stok != id);
        showFlash("✅ Riwayat stok dihapus");
      } else {
        showFlash("❌ Gagal menghapus riwayat stok", 'error');
      }
    }
  }
}


--- api/stok ---
<?php
models('Stok');
models('Produk');
require_once ROOT_PATH . '/config/api_init.php';

$res = [];
$status = 200;

switch ($method) {
  case 'GET':
    // GET /api/stok
    $stok = getAllStok();
    $res = ['success' => true, 'data' => $stok];
    break;

  case 'POST':
    api_require_admin();

    // Validasi input
    $kode_produk = $input_data['kode_produk'] ?? null;
    $tipe        = $input_data['tipe'] ?? null;
    $jumlah      = intval($input_data['jumlah'] ?? 0);
    $keterangan  = trim($input_data['keterangan'] ?? '');

    if (!$kode_produk || !$tipe || $jumlah <= 0) {
      respond_json(['success' => false, 'message' => 'Data tidak lengkap'], 422);
    }

    $produk = findProduk($kode_produk);
    if (!$produk) {
      respond_json(['success' => false, 'message' => 'Produk tidak ditemukan'], 404);
    }

    // Tentukan perubahan stok
    $stok_baru = $produk['stok'];
    if ($tipe === 'masuk') {
      $stok_baru += $jumlah;
    } elseif ($tipe === 'keluar') {
      if ($produk['stok'] < $jumlah) {
        respond_json(['success' => false, 'message' => 'Stok tidak mencukupi untuk keluar'], 400);
      }
      $stok_baru -= $jumlah;
    } else {
      respond_json(['success' => false, 'message' => 'Tipe tidak valid'], 400);
    }

    // Simpan ke tabel stok
    $data_stok = [
      'kode_produk' => $kode_produk,
      'tipe' => $tipe,
      'jumlah' => $jumlah,
      'keterangan' => $keterangan
    ];
    tambahStok($data_stok);

    // Update stok di produk
    updateStokProduk($kode_produk, $stok_baru);

    $res = ['success' => true, 'message' => 'Stok berhasil diperbarui'];
    $status = 201;
    break;

  case 'DELETE':
    api_require_admin();

    $id = $_GET['id'] ?? null;
    $jumlah = $_GET['jumlah'] ?? 0;
    $kode_produk = $_GET['kode_produk'] ?? null;
    if (!$id || $jumlah <= 0) {
      respond_json(['success' => false, 'message' => 'Gagal hapus riwayat stok'], 400);
    }

    $produk = findProduk($kode_produk);
    if (!$produk) {
      respond_json(['success' => false, 'message' => 'Produk tidak ditemukan'], 404);
    }
    // Tentukan perubahan stok
    $stok_lama = $produk['stok'];
    $stok_baru = $stok_lama - $jumlah;
    if ($stok_baru < 0) {
      respond_json(['success' => false, 'message' => 'Stok tidak mencukupi untuk dihapus'], 400);
    }
    $ok1 = hapusStok($id);
    $ok2 =  updateStokProduk($kode_produk, $stok_baru);
    if (!$ok1 && !$ok2) {
      respond_json(['success' => false, 'message' => 'Gagal hapus riwayat stok'], 500);
    }
    $res = ['success' => true, 'message' => 'Riwayat stok dihapus'];
    break;

  default:
    $res = ['success' => false, 'message' => 'Metode tidak didukung'];
    $status = 405;
}

respond_json($res, $status);



--- models/stok ---
<?php

function getAllStok()
{
  global $conn;
  $sql = "
    SELECT s.id_stok, s.kode_produk, p.nama_produk, s.tipe, s.jumlah, s.keterangan, s.tanggal
    FROM stok s
    LEFT JOIN produk p ON s.kode_produk = p.kode_produk
    ORDER BY s.tanggal DESC
  ";
  $res = $conn->query($sql);

  $stok = [];
  while ($row = $res->fetch_assoc()) {
    $stok[] = $row;
  }
  return $stok;
}

function tambahStok($data)
{
  global $conn;
  $sql = "INSERT INTO stok (kode_produk, tipe, jumlah, keterangan, tanggal)
          VALUES (?, ?, ?, ?, NOW())";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param(
    "ssis",
    $data['kode_produk'],
    $data['tipe'],
    $data['jumlah'],
    $data['keterangan']
  );
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}

function hapusStok($id)
{
  global $conn;
  $sql = "DELETE FROM stok WHERE id_stok = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $id);
  $result = $stmt->execute();
  $stmt->close();
  return $result;
}


--- models/transaksi ---
<?php

function getTransaksiList($page = 1, $limit = 10, $search = null, $start = null, $end = null, $metode = null,  $order_by = 'tanggal_transaksi', $order_dir = 'DESC')
{
  global $conn;
  $offset = ($page - 1) * $limit;

  $conditions = [];

  // filter search
  if ($search) {
    $safe = "%" . $conn->real_escape_string($search) . "%";
    $conditions[] = "kode_transaksi LIKE '$safe'";
  }

  // filter tanggal
  if ($start && $end) {
    $safeStart = $conn->real_escape_string($start);
    $safeEnd = $conn->real_escape_string($end);
    $conditions[] = "DATE(tanggal_transaksi) BETWEEN '$safeStart' AND '$safeEnd'";
  }
  // filter metode bayar
  if ($metode) {
    $safeMetode = $conn->real_escape_string($metode);
    $conditions[] = "metode_bayar = '$safeMetode'";
  }
  // search id transaksi
  if ($search) {
    $safeSearch = "%" . $conn->real_escape_string($search) . "%";
    $where = "WHERE p.nama_produk LIKE '$safeSearch' OR k.nama_kategori LIKE '$safeSearch'";
  }


  $where = '';
  if (count($conditions) > 0) {
    $where = "WHERE " . implode(" AND ", $conditions);
  }

  // hitung total
  $resCount = $conn->query("SELECT COUNT(*) AS total FROM transaksi $where");
  $total = $resCount->fetch_assoc()['total'];

  // ambil data
  $res = $conn->query("
      SELECT t.*, u.nama AS kasir
      FROM transaksi t
      LEFT JOIN user u ON t.id_user = u.id_user
      $where
      ORDER BY t.$order_by $order_dir
      LIMIT $limit OFFSET $offset
    ");

  $data = [];
  while ($row = $res->fetch_assoc()) {
    $data[] = $row;
  }

  return [$data, $total];
}


function findTransaksi($id_transaksi)
{
  global $conn;
  $sql = "SELECT * FROM transaksi WHERE id_transaksi=$id_transaksi";
  $result = $conn->query($sql);
  $result = $result->fetch_assoc();
  return $result;
}

function tambahTransaksi($data)
{
  global $conn;
  $sql = "INSERT INTO transaksi (id_user, total_harga, status, kode_transaksi, metode_bayar) VALUES (?, ?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param(
    "iisss",
    $data['id_user'],
    $data['total_harga'],
    $data['status'],
    $data['kode_transaksi'],
    $data['metode_bayar']
  );
  $stmt->execute();
  $insert_id = $stmt->insert_id;
  $stmt->close();
  return $insert_id; // kembalikan id transaksi baru
}

function updateTransaksi($id_transaksi, $data)
{
  global $conn;
  $sql = "UPDATE transaksi SET total_harga=?, status=?, metode_bayar=? WHERE id_transaksi=?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param(
    "issi",
    $data['total_harga'],
    $data['status'],
    $data['metode_bayar'],
    $id_transaksi
  );
  $res = $stmt->execute();
  $stmt->close();
  return $res;
}

function hapusTransaksi($id_transaksi)
{
  global $conn;
  $stmt = $conn->prepare("DELETE FROM transaksi WHERE id_transaksi=?");
  $stmt->bind_param("i", $id_transaksi);
  $res = $stmt->execute();
  $stmt->close();
  return $res;
}



// tambahan
function getPendapatanByDate($date)
{
  global $conn;
  $safe = $conn->real_escape_string($date);
  $sql = "
    SELECT COALESCE(SUM(total_harga), 0) AS pendapatan
    FROM transaksi
    WHERE DATE(tanggal_transaksi) = '{$safe}'
  ";
  $res = $conn->query($sql);
  return floatval($res ? $res->fetch_assoc()['pendapatan'] : 0);
}

function getProdukTerjualByDate($date)
{
  global $conn;
  $safe = $conn->real_escape_string($date);
  $sql = "
    SELECT COALESCE(SUM(dt.jumlah), 0) AS total_item
    FROM detail_transaksi dt
    JOIN transaksi t ON dt.id_transaksi = t.id_transaksi
    WHERE DATE(t.tanggal_transaksi) = '{$safe}'
  ";
  $res = $conn->query($sql);
  return intval($res ? $res->fetch_assoc()['total_item'] : 0);
}



--- models/DetailTransaksi ---
<?php

function getDetailTransaksi($id_transaksi)
{
  global $conn;
  $stmt = $conn->prepare("
    SELECT d.*, p.nama_produk 
    FROM detail_transaksi d
    JOIN produk p ON d.kode_produk = p.kode_produk
    WHERE d.id_transaksi = ?
  ");
  $stmt->bind_param("i", $id_transaksi);
  $stmt->execute();
  $res = $stmt->get_result();
  $data = [];
  while ($row = $res->fetch_assoc()) {
    $data[] = $row;
  }
  $stmt->close();
  return $data;
}

function tambahDetailTransaksi($data)
{
  global $conn;

  $sql = "INSERT INTO detail_transaksi (id_transaksi, kode_produk, jumlah, harga_satuan, subtotal) VALUES (?, ?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param(
    "isiii",
    $data['id_transaksi'],
    $data['kode_produk'],
    $data['jumlah'],
    $data['harga_satuan'],
    $data['subtotal']
  );
  $res = $stmt->execute();
  return $res;
}

function hapusDetailTransaksi($id_transaksi)
{
  global $conn;
  $stmt = $conn->prepare("DELETE FROM detail_transaksi WHERE id_transaksi=?");
  $stmt->bind_param("i", $id_transaksi);
  $res = $stmt->execute();
  $stmt->close();
  return $res;
}



--- models/user ---
<?php

function getUsers()
{
  global $conn;
  $result = $conn->query("SELECT * FROM user");
  $user = [];
  while ($row = $result->fetch_assoc()) {
    $user[] = $row;
  }
  return $user;
}

function tambahUser($name, $email, $hashedPassword)
{
  global $conn;
  $stmt = $conn->prepare("INSERT INTO user (nama, email,  password) VALUES (?, ?, ?, ?)");
  $stmt->bind_param("ssss", $name, $email, $hashedPassword);
  $success = $stmt->execute();
  $stmt->close();
  return $success;
}

function findUserByEmail($email)
{
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM user WHERE email = ?");
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();
  $user = $result->fetch_assoc();
  $stmt->close();
  return $user;
}



--- api/Dashboard ---
<?php
require_once ROOT_PATH . '/config/api_init.php';
models('Transaksi');
models('DetailTransaksi');
models('Produk');
models('Kategori');

api_require_admin();

$res = [];
$status = 200;

switch ($method) {
  case 'GET':
    $hariIni = date('Y-m-d');
    $kemarin = date('Y-m-d', strtotime('-1 day'));
    $start7  = date('Y-m-d', strtotime('-6 days'));
    $end7    = $hariIni;

    // ======== STATISTIK DASAR ========

    // total kategori & produk
    $totalKategori = count(getAllKategori());
    $totalProduk   = count(getAllProduk());

    // pendapatan dan produk terjual
    $pendapatanHariIni = getPendapatanByDate($hariIni);
    $pendapatanKemarin = getPendapatanByDate($kemarin);
    $produkTerjualHariIni = getProdukTerjualByDate($hariIni);
    $produkTerjualKemarin = getProdukTerjualByDate($kemarin);

    // produk hampir habis
    $produkHampirHabis = getProdukHampirHabis(10);

    // ambil semua transaksi 7 hari terakhir
    [$daftar, $total] = getTransaksiList(1, 10000, null, $start7, $end7, null);

    // hitung transaksi hari ini & kemarin
    $trxHariIni = 0;
    $trxKemarin = 0;
    foreach ($daftar as $trx) {
      $tgl = date('Y-m-d', strtotime($trx['tanggal_transaksi']));
      if ($tgl === $hariIni) $trxHariIni++;
      if ($tgl === $kemarin) $trxKemarin++;
    }

    // ======== PENJUALAN 7 HARI (CHART) ========
    $penjualan7 = [];
    for ($i = 6; $i >= 0; $i--) {
      $tgl = date('Y-m-d', strtotime("-$i days"));
      $penjualan7[$tgl] = 0;
    }

    foreach ($daftar as $trx) {
      $tgl = date('Y-m-d', strtotime($trx['tanggal_transaksi']));
      if (isset($penjualan7[$tgl])) {
        $penjualan7[$tgl] += floatval($trx['total_harga']);
      }
    }

    $chart = [];
    foreach ($penjualan7 as $tgl => $total) {
      $chart[] = ['tanggal' => $tgl, 'total' => $total];
    }

    // ======== TRANSAKSI TERBARU ========
    $transaksiTerbaru = array_slice($daftar, 0, 5);

    // ======== PERSENTASE KENAIKAN ========
    $kenaikanPendapatan = 0;
    $kenaikanTransaksi = 0;
    $kenaikanProdukTerjual = 0;

    if ($pendapatanKemarin > 0)
      $kenaikanPendapatan = round((($pendapatanHariIni - $pendapatanKemarin) / $pendapatanKemarin) * 100, 2);
    elseif ($pendapatanHariIni > 0)
      $kenaikanPendapatan = 100;

    if ($trxKemarin > 0)
      $kenaikanTransaksi = round((($trxHariIni - $trxKemarin) / $trxKemarin) * 100, 2);
    elseif ($trxHariIni > 0)
      $kenaikanTransaksi = 100;

    if ($produkTerjualKemarin > 0)
      $kenaikanProdukTerjual = round((($produkTerjualHariIni - $produkTerjualKemarin) / $produkTerjualKemarin) * 100, 2);
    elseif ($produkTerjualHariIni > 0)
      $kenaikanProdukTerjual = 100;

    // ======== KIRIM RESPON ========
    $res = [
      'success' => true,
      'data' => [
        'kategori' => intval($totalKategori),
        'produk' => intval($totalProduk),
        'transaksiHariIni' => intval($trxHariIni),
        'pendapatanHariIni' => floatval($pendapatanHariIni),
        'produkTerjualHariIni' => intval($produkTerjualHariIni),
        'produkHampirHabis' => $produkHampirHabis,
        'kenaikanTransaksi' => $kenaikanTransaksi,
        'kenaikanPendapatan' => $kenaikanPendapatan,
        'kenaikanProdukTerjual' => $kenaikanProdukTerjual,
        'transaksiTerbaru' => $transaksiTerbaru,
        'chart' => $chart,
      ]
    ];
    break;

  default:
    $res = ['success' => false, 'message' => "Metode tidak didukung: $method"];
    $status = 405;
    break;
}

respond_json($res, $status);



--- api/transaksi ---
<?php
models('Transaksi');
models('DetailTransaksi');
models('Produk');


require_once ROOT_PATH . '/config/api_init.php';

// ambil id_transaksi
$id_transaksi = $_GET['id'] ?? null;

$res = [];
$status = 200;
api_require_admin();
switch ($method) {
  case 'GET':
    // GET /api/transaksi?id=1
    if ($id_transaksi) {
      $transaksi = findTransaksi($id_transaksi);
      if (!$transaksi) {
        $res = ['success' => false, 'message' => 'Transaksi tidak ditemukan'];
        $status = 404;
        break;
      }

      $detail = getDetailTransaksi($id_transaksi);
      $transaksi['detail'] = $detail;

      $res = ['success' => true, 'data' => $transaksi];
      break;
    }

    // GET /api/transaksi
    $page   = $_GET['halaman'] ?? 1;
    $limit  = $_GET['limit'] ?? 10;
    $search = trim($_GET['search'] ?? null);
    $start  = $_GET['start'] ?? null;
    $end    = $_GET['end'] ?? null;
    $metode    = $_GET['metode'] ?? null;

    [$daftar, $total] = getTransaksiList($page, $limit, $search, $start, $end, $metode);
    $res = [
      'success' => true,
      'data' => $daftar,
      'pagination' => [
        'total' => intval($total),
        'page' => $page,
        'limit' => $limit,
        'total_pages' => ceil($total / $limit)
      ]
    ];
    break;

  case 'POST':
    // POST /api/transaksi

    try {
      $conn->begin_transaction();

      // validasi
      if (empty($input_data['total_harga']) || empty($input_data['detail']) || !is_array($input_data['detail'])) {
        throw new Exception('Total harga dan detail transaksi wajib diisi', 422);
        break;
      }

      // generate kode_transaksi
      $timePart = substr(str_replace('.', '', microtime(true)), -8);
      $randomPart = random_int(100, 999);
      $kode_transaksi = 'TRX_' . $timePart . $randomPart;

      $input_data['kode_transaksi'] = $kode_transaksi;
      $input_data['status'] = $input_data['status'] ?? 'pending';
      $input_data['metode_bayar'] = $input_data['metode_bayar'] ?? 'TUNAI';
      $input_data['id_user'] = $input_data['id_user'] ?? $_SESSION['user']['id_user'];

      // simpan transaksi utama
      $id_transaksi_baru = tambahTransaksi($input_data);

      // simpan detail transaksi
      foreach ($input_data['detail'] as $item) {
        $produk = findProduk($item['kode_produk']);
        if (!$produk) {
          throw new Exception("Produk {$item['kode_produk']} tidak ditemukan", 404);
          break 2;
        }

        $jumlah = intval($item['jumlah']);
        if ($produk['stok'] < $jumlah) {
          throw new Exception("Stok produk {$produk['nama_produk']} tidak mencukupi", 422);
          break 2;
        }

        $subtotal = $item['harga_satuan'] * $jumlah;
        tambahDetailTransaksi([
          'id_transaksi' => $id_transaksi_baru,
          'kode_produk' => $item['kode_produk'],
          'jumlah' => $jumlah,
          'harga_satuan' => $item['harga_satuan'],
          'subtotal' => $subtotal
        ]);

        // update stok & terjual
        updateStokProduk($item['kode_produk'], $produk['stok'] - $jumlah);
        updateTerjualProduk($item['kode_produk'], $produk['terjual'] + $jumlah);
      }
      $conn->commit();
      $res = ['success' => true, 'message' => 'Transaksi berhasil dibuat', 'data' => ['id' => $id_transaksi_baru, 'kode_transaksi' => $kode_transaksi]];
      $status = 201;
    } catch (Exception $e) {
      $conn->rollback();
      $res = ['success' => false, 'message' => $e->getMessage()];
      $status = $e->getCode() ?: 500;
    }
    break;

  case 'PUT':
    break;
  case 'DELETE':
    if (!$id_transaksi) {
      $res = ['success' => false, 'message' => 'ID transaksi wajib diisi untuk dihapus'];
      $status = 400;
      break;
    }

    $hapus = hapusTransaksi($id_transaksi);
    if ($hapus) {
      $res = ['success' => true, 'message' => 'Transaksi berhasil dihapus'];
    } else {
      $res = ['success' => true, 'message' => 'Gagal hapus transaksi'];
      $status = 400;
    }
    break;

  default:
    $res = ['success' => false, 'message' => "Metode tidak didukung: $method"];
    $status = 405;
}

respond_json($res, $status);


--- pages/admin/transaksi/input ---
<?php
$pageTitle = "input Transaksi";
include INCLUDES_PATH . "admin/layout/header.php";
?>

<div x-data="transaksiPage()" x-init="fetchProduk()" class="bg-gray-50 space-y-3">
  <div class="grid grid-cols-1 md:grid-cols-3 gap-2 md:gap-4">
    <!-- LEFT: Daftar Produk -->
    <div class="md:col-span-2 bg-white p-2 md:p-4 rounded-lg shadow-md">
      <div class="mb-4 sticky top-0 z-10">
        <input id="searchProduk" type="text" placeholder="Cari produk..." autofocus
          x-model="search"
          class="p-5 font-medium rounded-none hover:scale-100 focus:scale-100 text-2xl bg-white text-black border-black focus:ring-0"
          @input.debounce.300="fetchProduk()"
          @keydown.enter.prevent="tambahProdukDariInput()">
      </div>
      <div class="min-h-[70dvh]">
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4 overflow-y-auto">
          <!-- <template x-for="p in produk" :key="p.kode_produk">
            <div class="border border-gray-200 hover:scale-95 p-3 rounded-lg hover:shadow-lg transition cursor-pointer"
              @click="tambahKeranjang(p)">
              <img :src="p.gambar ? `${uploadsUrl}/${p.gambar}` : `${assetsUrl}/img/no-image.webp`"
                class="w-full h-24 object-cover rounded-md mb-2">
              <h2 class="text-sm font-semibold text-gray-700" x-text="p.nama_produk"></h2>
              <p class="text-xs text-gray-500" x-text="p.nama_kategori"></p>
              <p class="text-sm font-bold text-gray-900 mt-1" x-text="formatRupiah(p.harga)"></p>
              <p class="text-xs text-gray-400" x-text="'Stok: ' + p.stok"></p>
            </div>
          </template> -->
          <template x-for="p in produk" :key="p.kode_produk">
            <div
              class="relative border border-gray-200 hover:scale-95 rounded-lg hover:shadow-lg transition cursor-pointer"
              @click="tambahKeranjang(p)">

              <!-- GAMBAR PRODUK -->
              <div class="relative">
                <img :src="p.gambar ? `${uploadsUrl}/${p.gambar}` : `${assetsUrl}/img/no-image.webp`"
                  class="w-full h-24 object-cover rounded-md mb-2">

                <!-- BADGE STOK -->
                <span
                  class="absolute top-1 right-1 text-[11px] font-semibold px-2 py-[2px] rounded-full text-neutral-800 shadow transition-all duration-200"
                  :style="{
                    backgroundColor: p.stok == 0
                      ? 'rgba(239, 68, 68, 1)'        // merah (habis)
                      : p.stok <= 10
                        ? `rgba(234, 179, 8, ${Math.min(1, Math.max(0.1, p.stok / 10))})`   // kuning
                        : `rgba(34, 197, 94, ${Math.min(1, Math.max(0.1, p.stok / 100))})`   // hijau
                  }"
                  x-text="p.stok > 0 ? 'Stok: ' + p.stok : 'Habis'">
                </span>


              </div>
              <!-- INFO PRODUK -->
              <div class="p-3">
                <h2 class="text-sm font-semibold text-gray-700" x-text="p.nama_produk"></h2>
                <p class="text-xs text-gray-500" x-text="p.nama_kategori"></p>
                <p class="text-sm font-bold text-gray-900 mt-1" x-text="formatRupiah(p.harga)"></p>
              </div>
            </div>
          </template>

        </div>
      </div>
    </div>

    <!-- RIGHT: Keranjang -->
    <div class="bg-white p-4 rounded-lg shadow-md flex flex-col">
      <h2 class="text-lg font-bold text-gray-800 mb-4">Keranjang</h2>
      <template x-if="keranjang.length === 0">
        <p class="text-gray-500 text-sm">Belum ada produk di keranjang</p>
      </template>

      <div class="flex flex-1 flex-col space-y-2">
        <template x-for="(item, index) in keranjang" :key="item.kode_produk">
          <div class="flex justify-between items-center border-b border-gray-200 pb-2">
            <div>
              <h3 class="font-semibold text-gray-700" x-text="item.nama_produk"></h3>
              <p class="text-xs text-gray-500" x-text="'Harga: ' + formatRupiah(item.harga_satuan)"></p>
            </div>
            <div class="flex items-center gap-2">
              <input type="number" min="1" class="w-16 text-sm"
                x-model.number="item.jumlah" @change="updateSubtotal(index)" @input.debounce.200>
              <p class="text-sm font-semibold" x-text="formatRupiah(item.subtotal)"></p>
              <button @click="hapusKeranjang(index)" class="text-red-500 hover:text-red-600">&times;</button>
            </div>
          </div>
        </template>
      </div>

      <div class="mt-4 border-t pt-4 space-y-2">
        <div class="flex justify-between text-neutral-800 font-bold">
          <span>Total</span>
          <span x-text="formatRupiah(totalHarga)"></span>
        </div>

        <div>
          <label>Metode Bayar</label>
          <select x-model="metodeBayar"
            class="">
            <option value="TUNAI">Tunai</option>
            <option value="QRIS">QRIS</option>
          </select>
        </div>
        <button @click="resetKeranjang()"
          class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow-md transition w-full">Reset Keranjang</button>
        <button @click="simpanTransaksi()"
          class="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-2 rounded-lg shadow-md transition">
          Simpan Transaksi
        </button>
      </div>
    </div>
  </div>
</div>

<script src="<?= ASSETS_URL . 'js/transaksiPage.js' ?>"></script>
<?php
include INCLUDES_PATH . "admin/layout/footer.php";


--- pages/admin/transaksi/riwayat ---
<?php
$pageTitle = "Riwayat Transaksi";
include INCLUDES_PATH . "admin/layout/header.php";
?>

<div x-data="riwayatTransaksiPage()" x-init="fetchTransaksi()" class="bg-gray-50 space-y-3">

  <!-- HEADER -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 p-3 lg:p-5">
    <div>
      <h1 class="text-2xl font-bold text-neutral-800 tracking-tight">Riwayat Transaksi</h1>
      <p class="text-sm text-gray-500">Pantau dan kelola seluruh riwayat transaksi GG-Mart dari sini.</p>
    </div>
    <div>
      <button @click="showFilter = !showFilter" class="md:hidden bg-gg-primary rounded-md flex    text-white items-center justify-center gap-2">
        Filter
        <!-- SVG Filter Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 " fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707L15 14.414V19a1 1 0 01-1.447.894l-4-2A1 1 0 019 17v-2.586L3.293 6.707A1 1 0 013 6V4z" />
        </svg>
      </button>
    </div>
  </div>

  <!-- FILTER -->
  <div :class="showFilter ? 'block' : 'hidden md:block'"
    x-transition:enter="transition transform ease-out duration-300"
    x-transition:enter-start="opacity-0 -translate-y-2"
    x-transition:enter-end="opacity-100 translate-y-0"
    x-transition:leave="transition transform ease-in duration-200"
    x-transition:leave-start="opacity-100 translate-y-0"
    x-transition:leave-end="opacity-0 -translate-y-2"
    class="px-3 md:px-5">
    <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-2">
      <label>Cari transaksi</label>
      <form @submit.prevent="doSearch" class="flex items-center shadow-sm">
        <input type="text" x-model="search" placeholder="TRX_12345678"
          class="border rounded px-2 py-1 w-full sm:w-auto">
        <button type="submit"
          class="hidden"></button>
      </form>
      <label>Tanggal Mulai
        <input type="date" x-model="filter.start"
          class="w-full sm:w-auto">
      </label>
      <label>Tanggal Selesai
        <input type="date" x-model="filter.end"
          class="w-full sm:w-auto">
      </label>
      <label>
        Metode Pembayaran
        <select x-model="filter.metode" class="w-full sm:w-auto">
          <option value="">Semua Metode</option>
          <option value="TUNAI">Tunai</option>
          <option value="QRIS">QRIS</option>
        </select>
      </label>
      <button @click="goPage(1)"
        class="bg-gg-accent hover:opacity-80 text-white px-4 py-1 sm:py-2 rounded w-full sm:w-auto">Tampilkan</button>
    </div>
  </div>

  <!-- LOADING -->
  <?php include INCLUDES_PATH . "/loading.php" ?>


  <!-- TABEL RIWAYAT TRANSAKSI -->
  <?php include INCLUDES_PATH . "/admin/table_riwayat_transaksi.php" ?>

  <!-- KOSONG -->
  <template x-if="!loading && transaksi.length === 0">
    <div class="bg-white rounded-lg shadow p-12 text-center border border-gray-200">
      <h3 class="text-lg font-semibold text-gray-800">tidak ada transaksi</h3>
    </div>
  </template>

  <!-- MODAL DETAIL TRANSAKSI -->
  <div x-show="modalDetail" class="fixed inset-0 -top-10 bg-black/40 flex items-center justify-center z-50 px-2 sm:px-0" @click.self="modalDetail=false">
    <div class="bg-white rounded-xl shadow-lg w-full max-w-lg p-4 sm:p-6 space-y-4">
      <div class="flex border-b pb-2 justify-between">
        <h2 class="text-lg font-bold text-gray-800">Detail Transaksi</h2>
        <!-- Tombol batal -->
        <button @click="batalTransaksi" class="bg-red-500 text-white hover:opacity-90">
          Batalkan transaksi ini?
        </button>
      </div>
      <template x-if="detail">
        <div class="overflow-x-auto">
          <p><strong>Kode:</strong> <span x-text="detail.kode_transaksi"></span></p>
          <p><strong>Tanggal:</strong> <span x-text="formatDateTime(detail.tanggal_transaksi)"></span></p>
          <p><strong>Metode:</strong> <span x-text="detail.metode_bayar"></span></p>
          <table class="w-full mt-3 border-t text-sm min-w-sm overflow-x-auto">
            <thead>
              <tr class="text-left bg-gray-50">
                <th class>Produk</th>
                <th class="text-center">Jumlah</th>
                <th class=text-right">Subtotal</th>
              </tr>
            </thead>
            <tbody>
              <template x-for="d in detail.detail" :key="d.kode_produk">
                <tr>
                  <td x-text="d.nama_produk"></td>
                  <td class="text-center" x-text="d.jumlah"></td>
                  <td class="text-right" x-text="formatRupiah(d.subtotal)"></td>
                </tr>
              </template>
            </tbody>
          </table>
          <div class="text-right font-bold mt-3 text-gray-800">
            Total: <span x-text="formatRupiah(detail.total_harga)"></span>
          </div>
        </div>
      </template>
      <div class="text-right">
        <button @click="modalDetail=false" class="mt-3 bg-gray-200 hover:bg-gray-300 rounded-lg text-gray-700">Tutup</button>
      </div>
    </div>
  </div>
</div>

<script src="<?= ASSETS_URL ?>/js/riwayatTransaksiPage.js"></script>

<?php include INCLUDES_PATH . "/admin/layout/footer.php"; ?>



--- pages/admin/dashborad ---
<?php
$pageTitle = "Dashboard Admin";
include INCLUDES_PATH . "/admin/layout/header.php";
?>

<div x-data="dashboardAdminPage()" x-init="fetchDashboard()" class="bg-gray-50 min-h-[100dvh] p-4 lg:p-6 space-y-6">
  <!-- HEADER -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
    <div>
      <h1 class="text-2xl font-bold text-neutral-800 tracking-tight">Dashboard Admin</h1>
      <p class="text-sm text-gray-500">Pantau statistik dan aktivitas terbaru di GGMART.</p>
    </div>
    <div class="text-sm text-gray-500">
      <span x-text="formatDate(now)"></span>
    </div>
  </div>

  <!-- STATISTIC CARDS -->
  <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
    <!-- TOTAL KATEGORI -->
    <div class="bg-white p-5 rounded-xl shadow hover:shadow-lg transition">
      <p class="text-gray-500 text-sm">Total Kategori</p>
      <h2 class="text-2xl font-bold text-gg-primary mt-1" x-text="stats.kategori"></h2>
    </div>

    <!-- TOTAL PRODUK -->
    <div class="bg-white p-5 rounded-xl shadow hover:shadow-lg transition">
      <p class="text-gray-500 text-sm">Total Produk</p>
      <h2 class="text-2xl font-bold text-gg-primary mt-1" x-text="stats.produk"></h2>
    </div>

    <!-- TRANSAKSI HARI INI -->
    <div class="bg-white p-5 rounded-xl shadow hover:shadow-lg transition relative">
      <p class="text-gray-500 text-sm">Transaksi Hari Ini</p>
      <div class="flex flex-col md:flex-row items-end justify-between">
        <h2 class="text-2xl font-bold text-blue-600 mt-1" x-text="stats.transaksiHariIni"></h2>
        <span :class="badgeClass(stats.kenaikanTransaksi)"
          class="text-xs px-2 py-1 rounded-full font-medium"
          x-text="formatBadge(stats.kenaikanTransaksi)"></span>
      </div>
    </div>

    <!-- PENDAPATAN HARI INI -->
    <div class="bg-white p-5 rounded-xl shadow hover:shadow-lg transition relative">
      <p class="text-gray-500 text-sm">Pendapatan Hari Ini</p>
      <div class="flex flex-col md:flex-row items-end justify-between">
        <h2 class="text-2xl font-bold text-green-600 mt-1" x-text="formatRupiah(stats.pendapatanHariIni)"></h2>
        <span :class="badgeClass(stats.kenaikanPendapatan)"
          class="text-xs px-2 py-1 rounded-full font-medium"
          x-text="formatBadge(stats.kenaikanPendapatan)"></span>
      </div>
    </div>

    <!-- PRODUK TERJUAL HARI INI -->
    <div class="bg-white p-5 rounded-xl shadow hover:shadow-lg transition relative">
      <p class="text-gray-500 text-sm">Produk Terjual Hari Ini</p>
      <div class="flex flex-col md:flex-row items-end justify-between">
        <h2 class="text-2xl font-bold text-orange-600 mt-1" x-text="stats.produkTerjualHariIni"></h2>
        <span :class="badgeClass(stats.kenaikanProdukTerjual)"
          class="text-xs px-2 py-1 rounded-full font-medium"
          x-text="formatBadge(stats.kenaikanProdukTerjual)"></span>
      </div>
    </div>
  </div>

  <!-- CHART + RIGHT COLUMN -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- CHART -->
    <div class="lg:col-span-2 bg-white p-5 rounded-xl shadow">
      <div class="flex items-center justify-between mb-3">
        <h3 class="text-lg font-bold text-neutral-800">Grafik Penjualan 7 Hari Terakhir</h3>
      </div>

      <div x-show="loading" class="py-8 flex items-center justify-center">
        <?php include INCLUDES_PATH . '/loading.php' ?>
      </div>

      <div class="min-h-96">
        <canvas x-show="!loading" id="chartPenjualan"></canvas>
      </div>
    </div>

    <!-- RIGHT: TRANSAKSI TERBARU + PRODUK HABIS -->
    <div class="space-y-6">
      <div class="bg-white p-4 rounded-xl shadow">
        <h4 class="font-semibold mb-3">Transaksi Terbaru</h4>
        <template x-if="loading">
          <div class="py-6 flex items-center justify-center">
            <?php include INCLUDES_PATH . '/loading.php' ?>
          </div>
        </template>

        <template x-if="!loading && stats.transaksiTerbaru.length === 0">
          <p class="text-sm text-gray-500">Belum ada transaksi terbaru</p>
        </template>

        <ul class="divide-y divide-gray-200 max-h-[300px] overflow-y-auto" x-show="!loading && stats.transaksiTerbaru">
          <template x-for="t in stats.transaksiTerbaru" :key="t.id_transaksi">
            <li class="py-2">
              <div class="flex justify-between items-start">
                <div>
                  <p class="text-sm font-semibold" x-text="t.kode_transaksi"></p>
                  <p class="text-xs text-gray-500" x-text="formatDateTime(t.tanggal_transaksi)"></p>
                </div>
                <div class="text-right">
                  <p class="text-sm font-bold text-green-600" x-text="formatRupiah(t.total_harga)"></p>
                  <p class="text-xs text-gray-400" x-text="t.metode_bayar"></p>
                </div>
              </div>
            </li>
          </template>
        </ul>
      </div>

      <!-- PRODUK HABIS -->
      <div class="bg-white p-4 rounded-xl shadow">
        <h4 class="font-semibold mb-3 text-red-600">Produk Hampir Habis</h4>
        <template x-if="stats.produkHampirHabis.length === 0">
          <p class="text-sm text-gray-500">Semua stok aman 🎉</p>
        </template>

        <ul class="divide-y divide-gray-200 max-h-48 overflow-y-auto" x-show="stats.produkHampirHabis.length">
          <template x-for="p in stats.produkHampirHabis" :key="p.kode_produk">
            <li class="py-2 flex justify-between items-center">
              <div class="text-sm" x-text="p.nama_produk"></div>
              <div class="text-sm font-semibold text-red-500" x-text="'Stok: ' + p.stok"></div>
            </li>
          </template>
        </ul>
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="<?= ASSETS_URL ?>/js/dashboardAdminPage.js"></script>
<?php include INCLUDES_PATH . "/admin/layout/footer.php"; ?>

--- js/dashboardAdminPage.js ---
function dashboardAdminPage() {
  return {
    now: new Date().toLocaleDateString('sv-SE'),
    stats: {
      kategori: 0,
      produk: 0,
      transaksiHariIni: 0,
      pendapatanHariIni: 0,
      produkTerjualHariIni: 0,
      produkHampirHabis: [],
      kenaikanTransaksi: 0,
      kenaikanPendapatan: 0,
      kenaikanProdukTerjual: 0,
      transaksiTerbaru: [],
    },
    loading: true,
    chart: null,

    async fetchDashboard() {
      try {
        let res = await fetch(`${baseUrl}/api/dashboard`);
        res = await res.json();
        if (res.success) {
          this.stats = res.data;
          this.renderChart(res.data.chart);
        }
      } catch (err) {
        console.error("Gagal memuat dashboard:", err);
      } finally {
        this.loading = false;
      }
    },

    renderChart(grafik) {
      const ctx = document.getElementById("chartPenjualan").getContext("2d");

      // Hancurkan chart lama jika ada
      if (this.chart) this.chart.destroy();

      // Cek apakah sedang di mobile (layar < 640px)
      const isMobile = window.innerWidth < 640;

      this.chart = new Chart(ctx, {
        type: "bar",
        data: {
          // Format tanggal jadi "13 Okt", "14 Okt", dst
          labels: grafik.map(g => {
            const d = new Date(g.tanggal);
            return d.toLocaleDateString("id-ID", { day: "numeric", month: "short" });
          }),
          datasets: [{
            label: "Pendapatan Harian (Rp)",
            data: grafik.map(g => g.total),
            backgroundColor: "rgba(22, 163, 74, 0.7)",
            borderColor: "#16a34a",
            borderWidth: 1.5,
            borderRadius: 6,
            hoverBackgroundColor: "rgba(22, 163, 74, 0.9)",
          }],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          layout: { padding: 0 },
          scales: {
            x: {
              display: true,
              grid: {
                display: true, // tetap tampilkan grid di semua lebar layar
                color: "#eee",
              },
              ticks: {
                color: "#555",
                font: { size: 12 },
              },
            },
            y: {
              display: !isMobile, // sembunyikan label kiri kalau di mobile
              grid: {
                display: true,
                color: "#eee",
              },
              ticks: {
                color: "#555",
                font: { size: 12 },
                callback: (value) => "Rp " + value.toLocaleString("id-ID"), // selalu awali Rp
              },
            },
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              enabled: true,
              mode: "nearest",
              intersect: true,
              callbacks: {
                title: ctx => `Tanggal: ${ctx[0].label}`,
                label: ctx => `Pendapatan: Rp ${ctx.raw.toLocaleString("id-ID")}`,
              },
            },
          },
          interaction: {
            mode: "nearest",
            intersect: true,
          },
          animation: {
            duration: 600,
            easing: "easeOutQuart", // animasi halus naik dari bawah
          },
        },
      });
    }
    ,


    badgeClass(persentase) {
      if (persentase > 0) return 'bg-green-100 text-green-700';
      if (persentase < 0) return 'bg-red-100 text-red-700';
      return 'bg-gray-100 text-gray-600';
    },

    formatBadge(persentase) {
      if (persentase > 0) return '+' + persentase + '%';
      if (persentase < 0) return persentase + '%';
      return '0%';
    }
  }
}


--- js/transaksiPage.js ---
function transaksiPage() {
  return {
    produk: [],
    keranjang: [],
    search: '',
    totalHarga: 0,
    metodeBayar: 'TUNAI',

    async fetchProduk() {
      let res = await fetch(`${baseUrl}/api/produk?search=${this.search}&limit=15`);
      res = await res.json();
      if (res.success) this.produk = res.data;
    },

    async tambahProdukDariInput() {
      if (!this.search.trim()) return;

      // ubah pencarian ke lowercase untuk perbandingan tanpa case-sensitive
      const keyword = this.search.trim().toLowerCase();

      // cari produk dengan nama persis sama
      const produkDitemukan = this.produk.find(p => p.nama_produk.toLowerCase() === keyword);

      if (produkDitemukan) {
        if (produkDitemukan.stok == 0) return;
        this.tambahKeranjang(produkDitemukan);
        this.search = ''; // reset input setelah berhasil
      } else {
        // kalau tidak ada yang cocok, bisa kasih sedikit feedback
        showFlash(`Produk "${this.search}" tidak ditemukan!`);
      }
    },


    tambahKeranjang(p) {
      let idx = this.keranjang.findIndex(i => i.kode_produk === p.kode_produk);
      if (idx >= 0) {
        if (this.keranjang[idx].jumlah < p.stok) {
          this.keranjang[idx].jumlah++;
          this.updateSubtotal(idx);
        }
      } else {
        if (p.stok == 0) return;
        this.keranjang.push({
          kode_produk: p.kode_produk,
          nama_produk: p.nama_produk,
          harga_satuan: Number(p.harga),
          jumlah: 1,
          subtotal: Number(p.harga),
          stok: p.stok // simpan stok di keranjang
        });
      }
      this.hitungTotal();
    },

    updateSubtotal(index) {
      let item = this.keranjang[index];
      if (item.jumlah > Number(item.stok)) {
        item.jumlah = Number(item.stok);
      }
      item.subtotal = Number(item.harga_satuan) * Number(item.jumlah);
      this.hitungTotal();
    },


    hapusKeranjang(index) {
      this.keranjang.splice(index, 1);
      this.hitungTotal();
    },

    hitungTotal() {
      this.totalHarga = this.keranjang.reduce((sum, i) => sum + Number(i.subtotal), 0);
    },

    resetKeranjang() {
      this.keranjang = [];
      this.totalHarga = 0;
    },

    async simpanTransaksi() {
      if (this.keranjang.length === 0) {
        showFlash('Keranjang masih kosong!');
        return;
      }

      let payload = {
        id_user: 1, // nanti diganti sesuai user admin yang login
        total_harga: this.totalHarga,
        metode_bayar: this.metodeBayar,
        detail: this.keranjang.map(i => ({
          kode_produk: i.kode_produk,
          jumlah: i.jumlah,
          harga_satuan: i.harga_satuan,
          subtotal: i.subtotal
        })),
        status: 'selesai'
      };

      let res = await fetch(`${baseUrl}/api/transaksi`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });
      res = await res.json();
      if (await res.success) {
        this.search = '';
        this.fetchProduk()
        this.resetKeranjang();
        showFlash('Transaksi berhasil disimpan!');
        document.getElementById('searchProduk').focus();
      } else {
        showFlash('Gagal simpan: ' + res.message, 'error');
      }
    }
  }
}


--- js/riwayatTransaksiPage.js ---
function riwayatTransaksiPage() {
  return {
    search: null,
    showFilter: false,
    filter: {
      start: new Date().toLocaleDateString('sv-SE'),
      end: new Date().toLocaleDateString('sv-SE'),
      metode: ''
    },
    transaksi: [],
    modalDetail: false,
    detail: null,
    pagination: {
      page: 1,
      total: 0,
      total_pages: 1,
      limit: 10
    },
    loading: false,

    async fetchTransaksi() {
      this.loading = true;
      let url = `${baseUrl}/api/transaksi?start=${this.filter.start}&end=${this.filter.end}&metode=${this.filter.metode}&halaman=${this.pagination.page}&limit=${this.pagination.limit}`;
      if (this.search) {
        url += `&search=${this.search}`;
      }

      try {
        const res = await fetch(url);
        const data = await res.json();

        if (data.success) {
          this.transaksi = data.data;
          this.pagination = data.pagination;
        } else {
          console.log("error")
        }
      } catch (err) {
        console.error("Error fetch transaksi:", err);
      } finally {
        this.loading = false;
      }
    },

    async lihatDetail(id) {
      try {
        const res = await fetch(`${baseUrl}/api/transaksi?id=${id}`);
        const data = await res.json();
        if (data.success) {
          this.detail = data.data;
          this.detail.id_transaksi = id;
          this.modalDetail = true;
        }
      } catch (err) {
        console.error("Error fetch detail transaksi:", err);
      }
    },

    async batalTransaksi() {
      try {
        if (!confirm('yakin ingin menghapus transaksi ini?')) return;
        console.log(this.detail.id_transaksi);
        let res = await fetch(`${baseUrl}/api/transaksi?id=${this.detail.id_transaksi}`, {
          method: 'DELETE'
        });
        res = await res.json();
        if (res.success) {
          this.transaksi = this.transaksi.filter(t => t.id_transaksi !== this.detail.id_transaksi);
          showFlash("✅ transaksi berhasil dihapus!");
          this.detail = null;
          this.modalDetail = false;
        } else {
          showFlash("❌ Gagal menghapus transaksi");
        }
      } catch (err) {
        console.error("Error saat menghapus transaksi:", err);
      }
    },

    doSearch() {
      this.pagination.page = 1;
      this.fetchTransaksi();
    },

    nextPage() {
      if (this.pagination.page < this.pagination.total_pages) {
        this.pagination.page++;
        this.fetchTransaksi(this.pagination.page);
      }
    },

    prevPage() {
      if (this.pagination.page > 1) {
        this.pagination.page--;
        this.fetchTransaksi(this.pagination.page);
      }
    },

    goPage(n) {
      this.pagination.page = n;
      this.fetchTransaksi(n);
    }
  }
}



--- pages/admin/produk/form ---
<?php
$act = $_GET['act'] ?? 'tambah';
$id  = $_GET['id'] ?? null;
$pageTitle = ($act === 'edit') ? "Edit Produk" : "Tambah Produk";

include INCLUDES_PATH . "admin/layout/header.php";
?>

<div x-data="produkFormPage('<?= $act ?>', '<?= $id ?>')" x-init="initPage()"
  class="p-1 lg:p-5 bg-gray-50 min-h-screen">
  <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-sm border border-gray-200 p-2 md:p-6 space-y-6">
    <!-- HEADER -->
    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-bold text-neutral-800" x-text="formTitle"></h1>
      <a :href="baseUrl + '/admin/produk'" class="text-sm text-gray-500 hover:text-gg-primary">← Kembali</a>
    </div>

    <!-- FORM -->
    <form @submit.prevent="submitForm" enctype="multipart/form-data" class="space-y-5">
      <!-- NAMA PRODUK -->
      <div>
        <label>Nama Produk <span class="text-red-500">*</span></label>
        <input type="text" x-model="form.nama_produk"
          placeholder="Nama produk" autofocus required>
      </div>

      <!-- KATEGORI -->
      <div>
        <label class="font-medium text-gray-700">Pilih Kategori</label>
        <select x-model="form.id_kategori" required class="w-full">
          <option value="">-- Pilih Kategori --</option>
          <template x-for="k in kategori" :key="k.id_kategori">
            <option :value="k.id_kategori" x-text="k.nama_kategori"></option>
          </template>
        </select>
      </div>



      <!-- HARGA -->
      <div>
        <label>Harga (Rp) <span class="text-red-500">*</span></label>
        <input type="number" x-model="form.harga"
          placeholder="Contoh: 25000" required>
      </div>

      <!-- DESKRIPSI -->
      <div>
        <label>Deskripsi</label>
        <textarea x-model="form.deskripsi" rows="4"></textarea>
      </div>

      <!-- GAMBAR -->
      <div>
        <label>Gambar Produk</label>
        <input type="file" @change="onFileChange" accept="image/*">
        <template x-if="preview">
          <img :src="preview" alt="Preview Gambar" class="mt-3 w-40 h-40 object-cover rounded-lg shadow">
        </template>
      </div>

      <!-- TOMBOL -->
      <div class="flex justify-end gap-3">
        <a :href="baseUrl + '/admin/produk'"
          class="px-5 text-gray-600 hover:bg-gray-100">Batal</a>
        <button type="submit"
          class="px-5 py-2 bg-gg-primary text-white rounded-lg hover:bg-gg-primary-hover transition"
          x-text="isEdit ? 'Simpan Perubahan' : 'Tambah Produk'"></button>
      </div>
    </form>
  </div>
</div>


<script src="<?= ASSETS_URL . '/js/produkFormPage.js' ?>"></script>

<?php include INCLUDES_PATH . "/admin/layout/footer.php"; ?>


--- js/produkFormPage.js ---
function produkFormPage(act, id) {
  return {
    form: {
      nama_produk: '',
      id_kategori: '',
      harga: '',
      deskripsi: '',
      gambar: null
    },
    kategori: [],
    preview: null,
    isEdit: act === 'edit',
    formTitle: act === 'edit' ? 'Edit Produk' : 'Tambah Produk',

    async initPage() {
      await this.fetchKategori();
      if (this.isEdit && id) await this.fetchProduk(id);
    },

    async fetchKategori() {
      const res = await fetch(`${baseUrl}/api/kategori?mode=all`);
      const data = await res.json();
      if (data.success) this.kategori = data.data;
    },

    async fetchProduk(kode) {
      let res = await fetch(`${baseUrl}/api/produk?k=${kode}`);
      res = await res.json();
      if (res.success) {
        const data = res.data;
        this.form = {
          nama_produk: data.nama_produk,
          id_kategori: data.id_kategori,
          harga: data.harga,
          stok: data.stok,
          deskripsi: data.deskripsi,
          gambar: null
        };
        this.kategoriKeyword = data.nama_kategori; // ← tampilkan nama kategori
        if (data.gambar) this.preview = `${uploadsUrl}/${data.gambar}`;
      }
    },

    onFileChange(e) {
      const file = e.target.files[0];
      if (file) {
        this.form.gambar = file;
        this.preview = URL.createObjectURL(file);
      }
    },

    async submitForm() {
      if (!this.form.id_kategori) {
        showFlash("Pilih kategori yang valid dari daftar!");
        return;
      }

      const formData = new FormData();
      for (const key in this.form) {
        if (this.form[key] !== null) formData.append(key, this.form[key]);
      }

      if (this.form.gambar instanceof File) {
        formData.append("gambar", this.form.gambar);
      }

      if (this.isEdit) formData.append("_method", "PUT");

      const url = this.isEdit
        ? `${baseUrl}/api/produk?k=${id}`
        : `${baseUrl}/api/produk`;

      const res = await fetch(url, { method: "POST", body: formData });
      const data = await res.json();

      if (data.success) {
        if (this.isEdit) {
          showFlash("Produk berhasil diupdate!");
          setTimeout(() => window.location.href = `${baseUrl}/admin/produk`, 1000);
        } else {
          showFlash(this.isEdit ? "Produk berhasil diupdate!" : "Produk berhasil ditambahkan!");
          this.form = {};
          this.kategoriKeyword = '';
        }
      } else {
        showFlash("Gagal menyimpan produk: " + data.message, 'error');
      }
    },
  };
}



--- includes/admin/table_produk.php ---
<template x-if="!loading && produk.length > 0">
  <div class="md:p-3">
    <!-- TABEL -->
    <div class="bg-white rounded-md shadow-sm border border-gray-200 overflow-auto max-h-[80dvh] custom-scrollbar">
      <table class="table">
        <!-- HEAD -->
        <thead class="sticky top-0 z-10">
          <tr>
            <th>Produk</th>
            <th>Kategori</th>
            <th>Harga</th>
            <th class="hidden md:table-cell">Deskripsi</th>
            <th class="text-center">Stok & Terjual</th>
            <th class="text-center">Aksi</th>
          </tr>
        </thead>
        <!-- BODY -->
        <tbody>
          <template x-for="p in produk" :key="p.kode_produk">
            <tr
              class="hover:bg-gg-primary/10 transition-colors duration-150 ease-in-out cursor-pointer border-b border-gray-100">

              <!-- PRODUK -->
              <td class="flex items-center gap-4 min-w-[300px]">
                <div class="flex-shrink-0">
                  <img :src="p.gambar ? `${uploadsUrl}/${p.gambar}` : `${assetsUrl}/img/no-image.webp`"
                    alt="gambar produk" class="w-16 h-16 object-cover rounded-lg border border-gray-200 shadow-sm">
                </div>
                <div class="flex flex-col gap-1">
                  <span class="font-semibold text-gray-800 text-sm md:text-base line-clamp-1" x-text="p.nama_produk"></span>
                  <span class="text-xs text-gray-500">Kode: <span x-text="p.kode_produk"></span></span>
                </div>
              </td>

              <!-- KATEGORI -->
              <td class="text-gray-700 font-medium truncate" x-text="p.nama_kategori ?? 'Tidak Berkategori'"></td>

              <!-- HARGA -->
              <td class="font-semibold text-gray-800 whitespace-nowrap" x-text="formatRupiah(p.harga)"></td>

              <!-- DESKRIPSI -->
              <td class="hidden md:table-cell text-gray-600 truncate max-w-xs" x-text="p.deskripsi"></td>


              <!-- STOK & TERJUAL -->
              <td class="text-center whitespace-nowrap">
                <div class="flex justify-center items-center gap-2">
                  <!-- Badge Stok -->
                  <span class="px-2 py-1 rounded-full text-xs font-semibold text-white"
                    :class="p.stok <= 5 ? 'bg-red-500' : 'bg-gg-primary'"
                    x-text="`Stok: ${p.stok}`">
                  </span>
                  <!-- Badge Terjual -->
                  <span class="px-2 py-1 rounded-full text-xs font-semibold bg-blue-500 text-white"
                    x-text="`Terjual: ${p.terjual}`">
                  </span>
                </div>
              </td>

              <!-- AKSI -->
              <td class="text-center">
                <div class="flex justify-center items-center">
                  <!-- Tombol Edit -->
                  <a :href="`${baseUrl}/admin/produk/form?id=${p.kode_produk}&act=edit`"
                    class="rounded-full text-blue-600 hover:bg-blue-50 hover:text-blue-800"
                    title="Edit Produk">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none"
                      viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round"
                        d="M15.232 5.232a3 3 0 014.243 4.243L8.25 20.5H3.75v-4.5L15.232 5.232z" />
                    </svg><span class="hidden md:inline"> Edit</span>
                  </a>

                  <!-- Tombol Hapus -->
                  <button @click="hapusProduk(p.kode_produk)"
                    class="rounded-full text-red-600 hover:bg-red-50 hover:text-red-700"
                    title="Hapus Produk">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none"
                      viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round"
                        d="M6 18L18 6M6 6l12 12" />
                    </svg> <span class="hidden md:inline"> Hapus</span>
                  </button>
                </div>
              </td>
            </tr>
          </template>
        </tbody>
      </table>

    </div>
    <!-- PAGINATION -->
    <div class="flex flex-col p-4 md:flex-row justify-between items-center border-t border-gray-100 gap-3 bg-gray-50">
      <p class="text-sm text-gray-500" x-text="`Menampilkan ${produk.length} dari ${pagination.total} produk`"></p>
      <div class="flex flex-wrap gap-2">
        <button @click="prevPage" :disabled="pagination.page === 1"
          class="px-3 py-1 border rounded-md disabled:opacity-40 hover:bg-gray-100">‹</button>
        <template x-for="n in pagination.total_pages" :key="n">
          <button @click="goPage(n)"
            :class="{'bg-gg-primary text-white shadow-sm': pagination.page === n, 'border text-gray-700 hover:bg-gray-100': pagination.page !== n}"
            class="px-3 py-1 rounded-md transition">
            <span x-text="n"></span>
          </button>
        </template>
        <button @click="nextPage" :disabled="pagination.page === pagination.total_pages"
          class="px-3 py-1 border rounded-md disabled:opacity-40 hover:bg-gray-100">›</button>
      </div>
    </div>
  </div>
</template>


